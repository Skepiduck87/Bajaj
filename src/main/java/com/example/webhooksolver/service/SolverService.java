package com.example.webhooksolver.service; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.jdbc.core.JdbcTemplate; import org.springframework.stereotype.Service; import javax.annotation.PostConstruct; import java.util.List; @Service public class SolverService { private final JdbcTemplate jdbcTemplate; private final Logger log = LoggerFactory.getLogger(SolverService.class); public SolverService(JdbcTemplate jdbcTemplate) { this.jdbcTemplate = jdbcTemplate; } // Prepare sample schema/data for demo solving @PostConstruct public void initDb() { jdbcTemplate.execute("CREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(100), age INT, city VARCHAR(100));"); jdbcTemplate.update("INSERT INTO users (id, name, age, city) VALUES (?,?,?,?)", 1, "Alice", 30, "Mumbai"); jdbcTemplate.update("INSERT INTO users (id, name, age, city) VALUES (?,?,?,?)", 2, "Bob", 25, "Delhi"); jdbcTemplate.update("INSERT INTO users (id, name, age, city) VALUES (?,?,?,?)", 3, "Charlie", 35, "Bengaluru"); jdbcTemplate.update("INSERT INTO users (id, name, age, city) VALUES (?,?,?,?)", 4, "David", 28, "Kolkata"); log.info("Demo DB initialized with sample users"); } // Demo solver: executes an example query, stores results and returns the finalQuery string public String solveDemoAndReturnQuery() { // This is a placeholder where real problem-parsing and SQL generation should happen. // For demo, we will run a simple SQL and return that SQL as the finalQuery. String finalQuery = "SELECT name, age FROM users WHERE age > 28 ORDER BY age DESC;"; log.info("Running demo finalQuery: {}", finalQuery); List<String> rows = jdbcTemplate.query(finalQuery, (rs, rowNum) -> rs.getString("name") + "," + rs.getInt("age")); log.info("Query returned {} rows", rows.size()); rows.forEach(r -> log.info("row: {}", r)); // In a real implementation: parse the question, build SQL, optionally run it against a provided dataset return finalQuery; } }