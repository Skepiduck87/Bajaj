package com.example.webhooksolver.service; import com.example.webhooksolver.model.GenerateWebhookResponse; import com.example.webhooksolver.model.SubmitRequest; import com.fasterxml.jackson.databind.ObjectMapper; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.*; import org.springframework.jdbc.core.JdbcTemplate; import org.springframework.stereotype.Service; import org.springframework.web.client.HttpStatusCodeException; import org.springframework.web.client.RestTemplate; import java.io.File; import java.io.FileWriter; import java.nio.file.Files; import java.util.Map; @Service public class WebhookService { private final RestTemplate restTemplate; private final SolverService solverService; private final ObjectMapper objectMapper; private final Logger log = LoggerFactory.getLogger(WebhookService.class); @Value("${app.generateWebhookUrl}") private String generateWebhookUrl; @Value("${app.defaultRegNo}") private String defaultRegNo; public WebhookService(RestTemplate restTemplate, SolverService solverService, ObjectMapper objectMapper) { this.restTemplate = restTemplate; this.solverService = solverService; this.objectMapper = objectMapper; } public void performFlow() throws Exception { // 1. Call generateWebhook var requestBody = Map.of( "name", "John Doe", "regNo", defaultRegNo, "email", "john@example.com" ); log.info("Sending generateWebhook request to {}", generateWebhookUrl); HttpHeaders headers = new HttpHeaders(); headers.setContentType(MediaType.APPLICATION_JSON); HttpEntity<Map<String, String>> httpEntity = new HttpEntity<>(requestBody, headers); ResponseEntity<GenerateWebhookResponse> resp; try { resp = restTemplate.postForEntity(generateWebhookUrl, httpEntity, GenerateWebhookResponse.class); } catch (HttpStatusCodeException ex) { log.error("generateWebhook failed: {} - {}", ex.getStatusCode(), ex.getResponseBodyAsString()); throw ex; } if (resp.getStatusCode() != HttpStatus.OK && resp.getStatusCode() != HttpStatus.CREATED) { log.error("Unexpected status from generateWebhook: {}", resp.getStatusCode()); throw new IllegalStateException("generateWebhook failed"); } GenerateWebhookResponse body = resp.getBody(); if (body == null || body.getWebhook() == null || body.getAccessToken() == null) { log.error("Invalid response from generateWebhook: {}", objectMapper.writeValueAsString(body)); throw new IllegalStateException("Invalid response from generateWebhook"); } String webhookUrl = body.getWebhook(); String accessToken = body.getAccessToken(); log.info("Received webhook: {}", webhookUrl); log.info("Received accessToken: {}", accessToken.replaceAll(".(?=.{6})", "*") ); // 2. Determine question URL local logic (based on regNo last two digits) String reg = defaultRegNo.replaceAll("\\D", ""); int lastTwo = 0; if (reg.length() >= 2) { lastTwo = Integer.parseInt(reg.substring(reg.length() - 2)); } else if (reg.length() == 1) { lastTwo = Integer.parseInt(reg); } boolean isOdd = (lastTwo % 2) == 1; String qUrl = isOdd ? "https://drive.google.com/file/d/1IeSI6l6KoSQAFfRihIT9tEDICtoz-G/view?usp=sharing" : "https://drive.google.com/file/d/143MR5cLFrlNEuHzzWJ5RHnEWuijuM9X/view?usp=sharing"; log.info("Based on regNo '{}' selected question URL: {}", defaultRegNo, qUrl); // NOTE: In many cases these Drive links may require interactive auth. The solver provided is a demo solver. // 3. Solve the SQL problem (pluggable) - demo implementation uses in-memory H2 String finalQuery = solverService.solveDemoAndReturnQuery(); // 4. Store solution results locally (results.json) File out = new File("solver-results.json"); try (FileWriter fw = new FileWriter(out)) { var map = Map.of( "regNo", defaultRegNo, "questionUrl", qUrl, "finalQuery", finalQuery ); fw.write(objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(map)); } log.info("Stored solver results to {}", out.getAbsolutePath()); // 5. Submit finalQuery to webhook URL using the accessToken as JWT in Authorization header SubmitRequest submitRequest = new SubmitRequest(finalQuery); HttpHeaders submitHeaders = new HttpHeaders(); submitHeaders.setContentType(MediaType.APPLICATION_JSON); // Use the accessToken value as-is in the Authorization header (task required). Many APIs expect 'Bearer <token>' submitHeaders.set("Authorization", accessToken); HttpEntity<SubmitRequest> submitEntity = new HttpEntity<>(submitRequest, submitHeaders); log.info("Submitting finalQuery to webhook URL {}", webhookUrl); try { ResponseEntity<String> submitResp = restTemplate.postForEntity(webhookUrl, submitEntity, String.class); log.info("Submission response: status={}, body={}", submitResp.getStatusCode(), submitResp.getBody()); } catch (HttpStatusCodeException ex) { log.error("Submission failed: {} - {}", ex.getStatusCode(), ex.getResponseBodyAsString()); throw ex; } } }